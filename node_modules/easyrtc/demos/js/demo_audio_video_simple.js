
var selfEasyrtcid = "";
var connectList = {};
var channelIsActive = {};

var lastScreen = null;

function draw(v,c,w,h) {  
   if(v.paused || v.ended) return false;  
   c.drawImage(v,0,0,w,h);  
   var currentScreen = c.getImageData(0,0,w,h);
   var width = c.width;
   var height = c.height;
   for (var w = 0; w < width/4; w++) {
    for (var h = 0; h < height/4; h++) {}
      var i = h*width + w;
      /*
     if (lastScreen != null) {
          var lastBrightness = 0.34 * lastScreen.data[10] + 0.5 * lastScreen.data[10 + 1] + 0.16 * lastScreen.data[10 + 2];
          var currentBrightness = 0.34 * currentScreen.data[10] + 0.5 * currentScreen.data[10 + 1] + 0.16 * currentScreen.data[10 + 2];
          console.log(Math.abs(lastBrightness-currentBrightness));
         if (Math.abs(lastBrightness-currentBrightness)> 5.0) {
              var bgImg = document.getElementById("dark");
              bgImg.style.zIndex = "10";
         }
          
      }*/
      var r = 4 * i,
          g = r + 1,
          b = r + 2,
          a = r + 3,
          brightness = 0.34 * currentScreen.data[r] + 0.5 * currentScreen.data[g] + 0.16 * currentScreen.data[b];

      currentScreen.data[r] = brightness;    // Red
      currentScreen.data[g] = brightness;    // Green
      currentScreen.data[b] = brightness;    // Blue
      currentScreen.data[a] = 255; 
    }
  }
  c.putImageData(currentScreen, 0, 0);
  lastScreen = currentScreen;
  setTimeout(draw,20,v,c,w,h);  
}  


var c = document.getElementById('canvas');

function on_fullscreen_change() {
    if(document.mozFullScreen || document.webkitIsFullScreen) {
        var rect = c.getBoundingClientRect();
        c.width = rect.width;
        c.height = rect.height;
    }
    else {
        c.width = 500;
        c.height = 400;
    }
}

document.addEventListener('mozfullscreenchange', on_fullscreen_change);
document.addEventListener('webkitfullscreenchange', on_fullscreen_change);

var canvas = document.getElementById('callerVideoCanvas');
var context = canvas.getContext('2d');
context.rotate(180);
var v = document.getElementById('callerVideo');
var cw = Math.floor(canvas.clientWidth);  
var ch = Math.floor(canvas.clientHeight);  

var buttonCanvas = document.getElementById('buttonCanvas');
var buttonContext = buttonCanvas.getContext('2d');
var hang=document.getElementById("hang");
buttonContext.globalAlpha = 1.0;
buttonContext.drawImage(hang, 10, 10); 


canvas.height = ch;  
var call = true;

function getCallValue(){
    return call;
}
v.addEventListener('play', function(){ 
    var check = getCallValue();
    draw(this,context,cw,ch);  
},false);   


function connect() {
    

    easyrtc.setVideoDims(640,480);
    easyrtc.setRoomOccupantListener(convertListToButtons2);
    easyrtc.enableDataChannels(true);
    easyrtc.setDataChannelOpenListener(openListener);
    easyrtc.setDataChannelCloseListener(closeListener);
    easyrtc.setPeerListener(addToConversation);
    console.log("Connect to app");
    console.log("Connection done");
    easyrtc.easyApp("easyrtc.audioVideoSimple", "selfVideo", ["callerVideo"], loginSuccess, loginFailure);
    
    
 }

function addToConversation(who, msgType, content) {
  // Escape html special characters, then add linefeeds.
  content = content.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
  content = content.replace(/\n/g, "<br />");
  document.getElementById("conversation").innerHTML +=
      "<b>" + who + ":</b>&nbsp;" + content + "<br />";
}

function openListener(otherParty) {
  channelIsActive[otherParty] = true;
  updateButtonState(otherParty);
}
 
 
function closeListener(otherParty) {
  channelIsActive[otherParty] = false;
  updateButtonState(otherParty);
}
 
function updateButtonState(otherEasyrtcid) {
  var isConnected = channelIsActive[otherEasyrtcid];
  if(document.getElementById("connect_" + otherEasyrtcid)) {
    document.getElementById("connect_" + otherEasyrtcid).disabled = isConnected;
  }
  if( document.getElementById("send_" + otherEasyrtcid)) {
    document.getElementById("send_" + otherEasyrtcid).disabled = !isConnected;
  }
}

function clearConnectList() {
    var otherClientDiv = document.getElementById('otherClients');
    while (otherClientDiv.hasChildNodes()) {
        otherClientDiv.removeChild(otherClientDiv.lastChild);
    }
}

function convertListToButtons2(roomName, occupantList, isPrimary) {
  connectList = occupantList;
 
  var otherClientDiv = document.getElementById("otherClients");
  while (otherClientDiv.hasChildNodes()) {
    otherClientDiv.removeChild(otherClientDiv.lastChild);
  }
 
  var label, button;
  for (var easyrtcid in connectList) {
    var rowGroup = document.createElement("span");
    var rowLabel = document.createTextNode(easyrtc.idToName(easyrtcid));
    rowGroup.appendChild(rowLabel);
 
    button = document.createElement("button");
    button.id = "connect_" + easyrtcid;
    button.onclick = function(easyrtcid) {
      return function() {
        startCall(easyrtcid);
      };
    }(easyrtcid);
    label = document.createTextNode("Connect");
    button.appendChild(label);
    rowGroup.appendChild(button);
 
    button = document.createElement("button");
    button.id = "send_" + easyrtcid;
    button.onclick = function(easyrtcid) {
      return function() {
        sendStuffP2P(easyrtcid);
      };
    }(easyrtcid);
    label = document.createTextNode("Send Message");
    button.appendChild(label);
    rowGroup.appendChild(button);
    otherClientDiv.appendChild(rowGroup);
    updateButtonState(easyrtcid);
  }
  if (!otherClientDiv.hasChildNodes()) {
    otherClientDiv.innerHTML = "<em>Nobody else logged in to talk to...</em>";
  }
}

function startCall(otherEasyrtcid) {
  if (easyrtc.getConnectStatus(otherEasyrtcid) === easyrtc.NOT_CONNECTED) {
    try {
    easyrtc.call(otherEasyrtcid,
        function(caller, media) { // success callback
          if (media === "datachannel") {
            // console.log("made call succesfully");
            connectList[otherEasyrtcid] = true;
          }
        },
        function(errorCode, errorText) {
          connectList[otherEasyrtcid] = false;
          easyrtc.showError(errorCode, errorText);
        },
        function(wasAccepted) {
          // console.log("was accepted=" + wasAccepted);
        }
    );
    }catch( callerror) {
      console.log("saw call error ", callerror);
    }
  }
  else {
    easyrtc.showError("ALREADY-CONNECTED", "already connected to " + easyrtc.idToName(otherEasyrtcid));
  }
}
 
function sendStuffP2P(otherEasyrtcid) {
  var text = document.getElementById("sendMessageText").value;
  if (text.replace(/\s/g, "").length === 0) { // Don"t send just whitespace
    return;
  }
  if (easyrtc.getConnectStatus(otherEasyrtcid) === easyrtc.IS_CONNECTED) {
    if (text == "wake") {
        var bgImg = document.getElementById("dark");
        bgImg.style.zIndex = "-1000";
    }
    else if (text == "sleep") {
        var bgImg = document.getElementById("dark");
        bgImg.style.zIndex = "10";
    }
    easyrtc.sendDataP2P(otherEasyrtcid, "msg", text);
  }
  else {
    easyrtc.showError("NOT-CONNECTED", "not connected to " + easyrtc.idToName(otherEasyrtcid) + " yet.");
  }
 
  addToConversation("Me", "msgtype", text);
  document.getElementById("sendMessageText").value = "";
}

function convertListToButtons (roomName, data, isPrimary) {
    clearConnectList();
    var otherClientDiv = document.getElementById('otherClients');
    for(var easyrtcid in data) {
        var button = document.createElement('button');
        button.onclick = function(easyrtcid) {
            return function() {
                performCall(easyrtcid);
            };
        }(easyrtcid);

        var label = document.createTextNode(easyrtc.idToName(easyrtcid));
        button.appendChild(label);
        otherClientDiv.appendChild(button);
    }
}


function performCall(otherEasyrtcid) {
    easyrtc.hangupAll();

    var successCB = function() {};
    var failureCB = function() {};
    easyrtc.call(otherEasyrtcid, successCB, failureCB);
}


function loginSuccess(easyrtcid) {
    selfEasyrtcid = easyrtcid;
    document.getElementById("iam").innerHTML = "I am " + easyrtc.cleanId(easyrtcid);
}


function loginFailure(errorCode, message) {
    easyrtc.showError(errorCode, message);
}
